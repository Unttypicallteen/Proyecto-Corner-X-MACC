import dash
from dash import dcc, html
from dash.dependencies import Input, Output, State
import psycopg2
from psycopg2 import sql
from datetime import datetime

# Conexión a la base de datos
conn = psycopg2.connect(
    dbname="Proyecto Corner",
    user="postgres",
    password="123456789",
    host="localhost",
    port="5432"
)
cursor = conn.cursor()

# Creación de la aplicación Dash
app = dash.Dash(__name__)

# Diseño de la interfaz de usuario
app.layout = html.Div([
    html.H1("Registro de Vehículos al parqueadero"),

    html.Label("Nombre del Conductor:"),
    dcc.Input(id='input-nombre', type='text', value=''),

    html.Label("Placa del Vehículo:"),
    dcc.Input(id='input-placa', type='text', value=''),

    html.Button('Registrar Entrada', id='submit-button', n_clicks=0),
    html.Div(id='output-message')
])

# Callback para insertar datos en la base de datos
@app.callback(
    Output('output-message', 'children'),
    Input('submit-button', 'n_clicks'),
    State('input-nombre', 'value'),
    State('input-placa', 'value')
)
def registrar_entrada(n_clicks, nombre_c, Placa_Vehiculo):
    if n_clicks > 0:
        try:
            # Verificar si el nombre del conductor y la placa están relacionados
            query = """
            SELECT 1 FROM Conductor
            WHERE nombre = %s AND Placa_Vehiculo = %s
            """
            cursor.execute(query, (nombre_c, Placa_Vehiculo))
            relacion_valida = cursor.fetchone()

            if not relacion_valida:
                return "Error: El nombre del conductor no está relacionado con la placa del vehículo ingresado."

            # Si la relación es válida, proceder con la inserción
            insert_query = """
            INSERT INTO vehiculo (nombre_c, Placa_Vehiculo, hora_ingreso, fecha_ingreso)
            VALUES (%s, %s, current_time, current_date)
            """
            cursor.execute(insert_query, (nombre_c, Placa_Vehiculo))
            conn.commit()

            # Obtener la hora y la fecha actuales
            hora_ingreso = datetime.now().strftime("%H:%M:%S")
            fecha_ingreso = datetime.now().strftime("%Y-%m-%d")

            return f"Vehículo registrado con éxito: \nEl usuario con nombre {nombre_c} ingresó el vehículo con placa {Placa_Vehiculo} a las {hora_ingreso} en la fecha {fecha_ingreso}."

        except Exception as e:
            conn.rollback()
            return f"Error al registrar: {str(e)}"

    return "Introduce los datos y presiona 'Registrar Entrada'."

# Ejecutar la aplicación
if __name__ == '__main__':
    app.run_server(debug=True)
